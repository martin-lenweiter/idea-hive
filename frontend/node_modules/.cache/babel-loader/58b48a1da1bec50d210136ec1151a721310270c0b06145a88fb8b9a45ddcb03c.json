{"ast":null,"code":"var _jsxFileName = \"/Users/martinlenweiter/projects/idea-repository-frontend/src/components/IdeaForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { TextField, Button, Container, Typography, Box } from '@mui/material';\nimport { createIdea } from '../api/endpoints/ideas';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IdeaForm = () => {\n  _s();\n  // Local state for form fields\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  // Handle form submission\n  const handleSubmit = async event => {\n    event.preventDefault(); // Prevent default form submission behavior\n    setLoading(true);\n\n    // Data to send in the POST request\n    const idea = {\n      title,\n      description\n    };\n    try {\n      // POST request to backend\n      await createIdea(idea);\n      alert('Idea submitted successfully!');\n      // Reset form fields after successful submission\n      setTitle('');\n      setDescription('');\n    } catch (error) {\n      console.error('Failed to submit idea:', error);\n      alert('Error submitting the idea.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"Submit an Idea\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      component: \"form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Title\",\n        value: title,\n        onChange: e => setTitle(e.target.value),\n        fullWidth: true,\n        required: true,\n        margin: \"normal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Description\",\n        value: description,\n        onChange: e => setDescription(e.target.value),\n        fullWidth: true,\n        required: true,\n        multiline: true,\n        rows: 4,\n        margin: \"normal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        variant: \"contained\",\n        color: \"primary\",\n        disabled: loading,\n        children: loading ? 'Submitting...' : 'Submit'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(IdeaForm, \"RtVYfq0blXdjpuhtkKx91y6nc4U=\");\n_c = IdeaForm;\nexport default IdeaForm;\nvar _c;\n$RefreshReg$(_c, \"IdeaForm\");","map":{"version":3,"names":["React","useState","TextField","Button","Container","Typography","Box","createIdea","jsxDEV","_jsxDEV","IdeaForm","_s","title","setTitle","description","setDescription","loading","setLoading","handleSubmit","event","preventDefault","idea","alert","error","console","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","component","onSubmit","label","value","onChange","e","target","fullWidth","required","margin","multiline","rows","type","color","disabled","_c","$RefreshReg$"],"sources":["/Users/martinlenweiter/projects/idea-repository-frontend/src/components/IdeaForm.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { TextField, Button, Container, Typography, Box } from '@mui/material';\nimport axios from 'axios';\nimport { createIdea } from '../api/endpoints/ideas';\n\nconst IdeaForm: React.FC = () => {\n  // Local state for form fields\n  const [title, setTitle] = useState<string>('');\n  const [description, setDescription] = useState<string>('');\n  const [loading, setLoading] = useState<boolean>(false);\n\n  // Handle form submission\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault(); // Prevent default form submission behavior\n    setLoading(true);\n\n    // Data to send in the POST request\n    const idea = {\n      title,\n      description,\n    };\n\n    try {\n      // POST request to backend\n      await createIdea(idea);\n      alert('Idea submitted successfully!');\n      // Reset form fields after successful submission\n      setTitle('');\n      setDescription('');\n    } catch (error) {\n      console.error('Failed to submit idea:', error);\n      alert('Error submitting the idea.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Container>\n      <Typography variant=\"h4\" gutterBottom>\n        Submit an Idea\n      </Typography>\n      <Box component=\"form\" onSubmit={handleSubmit}>\n        <TextField\n          label=\"Title\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n          fullWidth\n          required\n          margin=\"normal\"\n        />\n        <TextField\n          label=\"Description\"\n          value={description}\n          onChange={(e) => setDescription(e.target.value)}\n          fullWidth\n          required\n          multiline\n          rows={4}\n          margin=\"normal\"\n        />\n        <Button\n          type=\"submit\"\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={loading}\n        >\n          {loading ? 'Submitting...' : 'Submit'}\n        </Button>\n      </Box>\n    </Container>\n  );\n};\n\nexport default IdeaForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}